{"componentChunkName":"component---src-pages-monitoring-sysdig-activities-prometheus-java-mdx","path":"/monitoring/sysdig/activities/prometheus/java/","result":{"pageContext":{"frontmatter":{"title":"Integrate Prometheus Java Metrics","description":"Lab to show how to work with prometheus metrics"},"relativePagePath":"/monitoring/sysdig/activities/prometheus/java.mdx","titleType":"page","MdxNode":{"id":"a16123e1-a845-59b4-bc8d-b590928be7d8","children":[],"parent":"b21e9a12-0c17-5ed7-95e1-a7e235ae9178","internal":{"content":"---\ntitle: Integrate Prometheus Java Metrics\ndescription: Lab to show how to work with prometheus metrics\n---\n\n\n### Prerequisite\n\n- Configure the Sysdig Agent on a kubernetes cluster, you can use one of the labs in this bootcamp located [here](/monitoring/sysdig/#activities)\n\n\n### Deploy java application enable with prometheus\n\n- Review the instrumented java application [Main.java](https://github.com/ibm-cloud-architecture/learning-cloudnative-101/blob/master/examples/monitoring/prometheus/java/src/main/java/Main.java)\n\n- Creagte a namespace to deploy the application\n```shell\nkubectl create ns dev\n```\n- Deploy the following java application\n```shell\ncat <<EOF | kubectl -n dev apply -f -\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus-java-app\nspec:\n  selector:\n    matchLabels:\n      app: prometheus-java-app\n  template:\n    metadata:\n      labels:\n        app: prometheus-java-app\n      annotations:\n        prometheus.io/scrape: \"true\"\n        prometheus.io/path: \"/prometheus\"\n        prometheus.io/port: \"8080\"\n    spec:\n      containers:\n        - name: prometheus-java-app\n          image: docker.io/ibmcase/prometheus-java\nEOF\n```\n- Expose java application service\n```shell\nkubectl -n dev create svc nodeport prometheus-java-app --tcp=80:80 --tcp 8080:8080\n```\n\n- Deploy the following java application\n\n\n### Test the application\n- Expose application web service on local port 8000, and prometheus on 8080, each command on a new terminal\n```shell\nkubectl -n dev port-forward service/prometheus-java-app 8000:80\n```\n```shell\nkubectl -n dev port-forward service/prometheus-java-app 8080:8080\n```\n\n- Send http request to the web service\n```shell\nwhile true; do sleep 1; curl http://localhost:8000 -si | head -1 ; done\n```\nOutput looks like this\n```\nHTTP/1.1 200 OK\n```\n\n- Query prometheus endpoint\n```shell\ncurl http://localhost:8080/prometheus\n```\nOutput looks like this\n```\n# HELP process_cpu_seconds_total Total user and system CPU time spent in seconds.\n# TYPE process_cpu_seconds_total counter\nprocess_cpu_seconds_total 1.39\n# HELP process_start_time_seconds Start time of the process since unix epoch in seconds.\n```\n\n## Java Prometheus Metrics in Sysdig\n- Open Sysdig\n- Select Explore\n- Select Deployments\n- Select `dev` namespace\n- Select deployment `prometheus-java-app`\n- Select from drop down metrics, select Prometheus\n- Select metrics collected start with `jvm_` or `java_` for example `java_my_counter`\n\n![java-metrics](./images/java_my_counter.png)\n\n## References\n\n- Sysdig Blog Prometheus metrics / OpenMetrics code instrumentation (https://sysdig.com/blog/prometheus-metrics/)\n","type":"Mdx","contentDigest":"8539e68b33307d4c764e5de4b00a6285","counter":548,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Integrate Prometheus Java Metrics","description":"Lab to show how to work with prometheus metrics"},"exports":{},"rawBody":"---\ntitle: Integrate Prometheus Java Metrics\ndescription: Lab to show how to work with prometheus metrics\n---\n\n\n### Prerequisite\n\n- Configure the Sysdig Agent on a kubernetes cluster, you can use one of the labs in this bootcamp located [here](/monitoring/sysdig/#activities)\n\n\n### Deploy java application enable with prometheus\n\n- Review the instrumented java application [Main.java](https://github.com/ibm-cloud-architecture/learning-cloudnative-101/blob/master/examples/monitoring/prometheus/java/src/main/java/Main.java)\n\n- Creagte a namespace to deploy the application\n```shell\nkubectl create ns dev\n```\n- Deploy the following java application\n```shell\ncat <<EOF | kubectl -n dev apply -f -\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prometheus-java-app\nspec:\n  selector:\n    matchLabels:\n      app: prometheus-java-app\n  template:\n    metadata:\n      labels:\n        app: prometheus-java-app\n      annotations:\n        prometheus.io/scrape: \"true\"\n        prometheus.io/path: \"/prometheus\"\n        prometheus.io/port: \"8080\"\n    spec:\n      containers:\n        - name: prometheus-java-app\n          image: docker.io/ibmcase/prometheus-java\nEOF\n```\n- Expose java application service\n```shell\nkubectl -n dev create svc nodeport prometheus-java-app --tcp=80:80 --tcp 8080:8080\n```\n\n- Deploy the following java application\n\n\n### Test the application\n- Expose application web service on local port 8000, and prometheus on 8080, each command on a new terminal\n```shell\nkubectl -n dev port-forward service/prometheus-java-app 8000:80\n```\n```shell\nkubectl -n dev port-forward service/prometheus-java-app 8080:8080\n```\n\n- Send http request to the web service\n```shell\nwhile true; do sleep 1; curl http://localhost:8000 -si | head -1 ; done\n```\nOutput looks like this\n```\nHTTP/1.1 200 OK\n```\n\n- Query prometheus endpoint\n```shell\ncurl http://localhost:8080/prometheus\n```\nOutput looks like this\n```\n# HELP process_cpu_seconds_total Total user and system CPU time spent in seconds.\n# TYPE process_cpu_seconds_total counter\nprocess_cpu_seconds_total 1.39\n# HELP process_start_time_seconds Start time of the process since unix epoch in seconds.\n```\n\n## Java Prometheus Metrics in Sysdig\n- Open Sysdig\n- Select Explore\n- Select Deployments\n- Select `dev` namespace\n- Select deployment `prometheus-java-app`\n- Select from drop down metrics, select Prometheus\n- Select metrics collected start with `jvm_` or `java_` for example `java_my_counter`\n\n![java-metrics](./images/java_my_counter.png)\n\n## References\n\n- Sysdig Blog Prometheus metrics / OpenMetrics code instrumentation (https://sysdig.com/blog/prometheus-metrics/)\n","fileAbsolutePath":"/home/travis/build/ibm-cloud-architecture/learning-cloudnative-101/src/pages/monitoring/sysdig/activities/prometheus/java.mdx"}}}}